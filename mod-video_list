<?php
interface ThumbnailProvider {
    public function getThumbnail(string $id, string $img = ''): string;
}

class RutubeThumbnailProvider implements ThumbnailProvider {
    public function getThumbnail(string $id, string $img = ''): string {
        $url = 'https://rutube.ru/api/video/' . $id . '/';
        $json = @file_get_contents($url);
        if ($json === false) {
            // Обработка ошибки
            return '/assets/images/video/default.jpg';
        }
        $obj = json_decode($json);
        return ($img == '') ? $obj->thumbnail_url : '/assets/images/video/' . $img;
    }
}

class YoutubeThumbnailProvider implements ThumbnailProvider {
    public function getThumbnail(string $id, string $img = ''): string {
        return ($img == '') ? 'https://img.youtube.com/vi/' . $id . '/maxresdefault.jpg' : '/assets/images/video/' . $img;
    }
}

function getThumbnailProvider(string $host): ?ThumbnailProvider {
    switch ($host) {
        case 'rutube.ru':
            return new RutubeThumbnailProvider();
        case 'youtu.be':
            return new YoutubeThumbnailProvider();
        default:
            return null;
    }
}

$res = [];
$id = $modx->getOption('itemID', $scriptProperties, '');
$page = $modx->getObject('modResource', $id);
$arr_tv_value = json_decode($page->getTVValue('video_gal'));

foreach ($arr_tv_value as $v) {
    $link = parse_url(trim($v->link));
    $host = $link['host'];
    $path = explode('/', $link['path']);
    $v_id = end($path); // Получаем последний элемент пути как идентификатор видео

    $provider = getThumbnailProvider($host);
    if ($provider !== null) {
        $res[] = [
            'id' => $v_id,
            'link' => ($host == 'rutube.ru') ? 'https://rutube.ru/play/embed/' . $v_id . '/' : 'https://youtube.com/watch?v=' . $v_id,
            'preview' => $provider->getThumbnail($v_id, $v->image)
        ];
    }
}
return $res;
